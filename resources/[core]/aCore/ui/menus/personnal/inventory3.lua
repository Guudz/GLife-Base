---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Dylan Malandain.
--- DateTime: 29/08/2019 00:08
---
RMenu.Add(
    "personnal",
    "inventory",
    RageUI.CreateSubMenu(RMenu:Get("personnal", "main"), "Inventaire", "Objets disponibles")
)
local currPh = nil
RMenu.Add(
    "personnal",
    "multi_inventory",
    RageUI.CreateSubMenu(RMenu:Get("personnal", "inventory"), "Inventaire", "Actions disponibles")
)

RMenu.Add(
    "personnal",
    "actions_1",
    RageUI.CreateSubMenu(RMenu:Get("personnal", "inventory"), "Inventaire", "Actions disponibles")
)

RMenu.Add(
    "personnal",
    "actions_2",
    RageUI.CreateSubMenu(RMenu:Get("personnal", "multi_inventory"), "Inventaire", "Actions disponibles")
)
local oldTableLenght = 4
Inventory = setmetatable({Weight = 0}, Inventory)

local Infos = {
    ["permis-conduire"] = function()
        -- RageUI.Popup({message = "Nombre de points : ~b~".. Inventory.SelectedItem.data.points.."\n~s~Numéro de permis : ~b~" .. Inventory.SelectedItem.data.uid })
        TriggerEvent("ShowPermis", Inventory.SelectedItem)
    end,
    ["kevlar"] = function()
        RageUI.Popup({message = "Status du kevlar ~b~" .. Inventory.SelectedItem.data.status / 2 .. "%"})
    end,
    ["identity"] = function()
        TriggerEvent("ShowPicture", Inventory.SelectedItem)
        --RageUI.Popup({message="Prénom ~b~"..Inventory.SelectedItem.data.identity.first_name .."\n~s~Nom ~b~" .. Inventory.SelectedItem.data.identity.last_name .. "\n~s~DDN ~b~" .. Inventory.SelectedItem.data.identity.birth_date .. "\n~s~Origine ~b~"..Inventory.SelectedItem.data.identity.origine})
    end,
    ["carte_grise"] = function()
        --RageUI.Popup({message="Prénom ~b~"..Inventory.SelectedItem.data.identity.first_name .."\n~s~Nom ~b~" .. Inventory.SelectedItem.data.identity.last_name .."\n~s~Plaque ~b~" .. Inventory.SelectedItem.data.plate.."\n~s~Modèle du véhicule ~b~" ..GetLabelText(GetDisplayNameFromVehicleModel(Inventory.SelectedItem.data.model)) })
        TriggerEvent("ShowCarteGrise", Inventory.SelectedItem)
    end,
    ["bank_card"] = function()
        TriggerEvent("ShowBankCard", Inventory.SelectedItem)
    end
}

local Objsupp = {
    ["chaise"] = function()
        DeleteChaise()
    end,
    ["armoire"] = function()
        DeleteArmoire()
    end,
    ["fauteuil"] = function()
        DeleteFauteuil()
    end,
    ["commode"] = function()
        DeleteCommode()
    end,
    ["tablefbi"] = function()
        DeleteTablefbi()
    end
}

function tableCount(tbl, checkCount)
    if not tbl or type(tbl) ~= "table" then
        return not checkCount and 0
    end
    local n = 0
    for k, v in pairs(tbl) do
        n = n + 1
        if checkCount and n >= checkCount then
            return true
        end
    end
    return not checkCount and n
end
GetPlayers = function()
    local players = {}

    for _, player in ipairs(GetActivePlayers()) do
        local ped = GetPlayerPed(player)

        if DoesEntityExist(ped) then
            table.insert(players, player)
        end
    end

    return players
end
local max = 1.5
function GetPlayerServerIdInDirection(range)
    local ped, closestPlayer = PlayerPedId()
    local playerPos, playerForward = GetEntityCoords(ped), GetEntityForwardVector(ped)
    playerPos = playerPos + (addVector or playerForward * 0.5)

    for _, v in pairs(GetActivePlayers()) do
        local otherPed = GetPlayerPed(v)
        local otherPedPos = otherPed ~= ped and IsEntityVisible(otherPed) and GetEntityCoords(otherPed)
        if otherPed ~= PlayerPedId() then
            if
                otherPedPos and GetDistanceBetweenCoords(otherPedPos, playerPos) <= (d or max) and
                    (not closestPlayer or GetDistanceBetweenCoords(otherPedPos, playerPos))
             then
                closestPlayer = v
            end
        end
    end
    --  print(GetPlayerPed(closestPlayer),PlayerPedId())
    return closestPlayer ~= nil and GetPlayerServerId(closestPlayer) or false
end

function GetPlayers()
    local players = {}
    for i = 0, 255 do
        if NetworkIsPlayerActive(i) then
            players[#players + 1] = i
        end
    end
    return players
end

function CastRayPlayerPedToPoint(range, type)
    local playerPed = GetPlayerPed()
    local playerCoords = LocalPlayer().Position
    local entityWorld = GetOffsetFromEntityInWorldCoords(playerPed, 0.0, range, 0.0)
    local rayHandle =
        StartShapeTestRay(
        playerCoords.x,
        playerCoords.y,
        playerCoords.z,
        entityWorld.x,
        entityWorld.y,
        entityWorld.z,
        type,
        playerPed,
        0
    )
    local a, b, c, d, entity = GetRaycastResult(rayHandle)
    if entity ~= nil then
        return entity
    end
    return false
end

function GetEntityInDirection(range)
    if type(range) ~= "number" then
        range = 20.0
    end
    return CastRayPlayerPedToPoint(range, 10)
end

function GetPedInDirection(range)
    if type(range) ~= "number" then
        range = 20.0
    end
    local entity = GetEntityInDirection(range)
    if DoesEntityExist(entity) then
        if GetEntityType(entity) == 1 then
            return entity
        end
    end
    return false
end

function Inventory:Load()
    TriggerServerCallback(
        "getInventory",
        function(Data)
            -- local temp = json.decode(Data)
            -- for k ,v in pairs(temp) do
            --     print(k, dump(v))

            --     for i = 1 , Tablelength(v) , 1 do
            --         if v[tostring(i)] ~= nil then
            --             print("change")
            --             v[tonumber(i)] = v[tostring(i)]
            --             v[tostring(i)] = nil

            --         end

            --     end

            --     temp[k] = v

            -- end

            -- Data = json.encode(Data)
            if type(Data) ~= "table" then
                self.Inventory = Data == nil and {} or json.decode(Data)
            else
                self.Inventory = {}
            end
            oldTableLenght = #Data
            RefreshClothes()
            self:RefreshWeight()
        end
    )
end
exports(
    "canReceive",
    function(name, amount)
        return Inventory.CanReceive(name, amount)
    end
)
function Inventory.canReceive(name, amount)
    return Inventory.CanReceive(name, amount)
end
function Inventory.CanReceive(name, am)
    return Inventory.CanReceive(name, am)
end
function Inventory.CanReceive(_name, amount)
    Inventory:RefreshWeight()
    local tempWeight = Inventory.Weight
    if Items[_name] == nil then
        error("Mauvais item " .. _name)
    end
    tempWeight = tempWeight + (Items[_name].weight * amount)

    if tempWeight >= 40 then
        RageUI.Popup({message = "~r~Vous n'avez plus assez de place"})
        return false
    else
        return true
    end
end
function GetNuMale()
    return {
        torso = {id = 15, txt = 0},
        undershirt = {id = 15, txt = 0},
        tops = {id = 15, txt = 0},
        body_armor = {id = 0, txt = 0},
        backpacks = {id = 0, txt = 0},
        texture = {id = 0, txt = 0},
        feet = {id = 34, txt = 0},
        legs = {id = 14, txt = 0},
        accessories = {id = 0, txt = 0},
        mask = {toggle = false, id = 0, txt = 0},
        hat = {toggle = false, id = -1, txt = 0},
        glasses = {toggle = false, id = -1, txt = 0},
        ears = {toggle = false, id = -1, txt = 0},
        watches = {toggle = false, id = -1, txt = 0},
        bracelets = {toggle = false, id = -1, txt = 0}
    }
end
function GetNuFemale()
    return {
        torso = {id = 15, txt = 0},
        undershirt = {id = 15, txt = 0},
        tops = {id = 15, txt = 0},
        body_armor = {id = 0, txt = 0},
        backpacks = {id = 0, txt = 0},
        texture = {id = 0, txt = 0},
        feet = {id = 35, txt = 0},
        legs = {id = 21, txt = 0},
        accessories = {id = 0, txt = 0},
        mask = {toggle = false, id = 0, txt = 0},
        hat = {toggle = true, id = -1, txt = 0},
        glasses = {toggle = true, id = -1, txt = 0},
        ears = {toggle = true, id = -1, txt = 0},
        watches = {toggle = true, id = -1, txt = 0},
        bracelets = {toggle = true, id = -1, txt = 0}
    }
end
function RefreshClothes()
    visor = false
    --print('abc')
    local clothesIn = Inventory.Inventory ~= nil and Inventory.Inventory["clothe"] or nil
    local accessIn = Inventory.Inventory ~= nil and Inventory.Inventory["access"] or nil
    local Clothes = {}
    if isMale() then
        Clothes = GetNuMale()
    else
        Clothes = GetNuFemale()
    end

    UpdateEntityOutfit(PlayerPedId(), Clothes)
    if clothesIn ~= nil then
        for i = 1, #clothesIn, 1 do
            if clothesIn[i].data.equiped then
                if clothesIn[i].data.type == 0 then
                    SetPedComponentVariation(
                        PlayerPedId(),
                        clothesIn[i].data.component,
                        clothesIn[i].data.var,
                        clothesIn[i].data.ind
                    )
                    if clothesIn[i].data.component == 11 then
                        SetPedComponentVariation(PlayerPedId(), 8, clothesIn[i].data.h, clothesIn[i].data.hV, 2)
                        SetPedComponentVariation(PlayerPedId(), 3, clothesIn[i].data.bras)
                    end
                end
            end
        end
    end
    if accessIn ~= nil then
        for i = 1, #accessIn, 1 do
            if accessIn[i].data.equiped then
                SetPedPropIndex(
                    PlayerPedId(),
                    accessIn[i].data.component,
                    accessIn[i].data.var,
                    accessIn[i].data.ind,
                    2
                )
            end
        end
    else
    end




    refreshDemarche()
end
function Inventory:Format()
    self.Inventory = {}
    for i = 1, #self.Data, 1 do
        local p = self.Data[i]
        if self.Inventory[p.name] == nil then
            self.Inventory[p.name] = {}
        end
        local c = self.Inventory[p.name]
        local data = p.data ~= nil and json.decode(p.data) or nil
        table.insert(c, {name = p.name, data = data, label = p.label, id = p.id})
    end
    RefreshClothes()
    self:RefreshWeight()
end

function Inventory:Delete()
    Inventory:RemoveItemToInv(Inventory.SelectedItem.id, Inventory.SelectedItem.name)
    --TriggerServerEvent("inventory:RemoveItem",Inventory.SelectedItem.id,Inventory.SelectedItem.name)
    RageUI.GoBack()
    RageUI.GoBack()
    RageUI.GoBack()
end

function Inventory:UseItem()
    --print("use")
    if Items[self.SelectedItem.name].category == "weapon" then
        EquipWeapon()
    elseif Items[self.SelectedItem.name].type == "props" then
        SpecialProps()
    elseif Items[self.SelectedItem.name].category == "food" then
        TriggerEvent("miam:Drink", self.SelectedItem, Items)
        Inventory:Delete()
    elseif Items[self.SelectedItem.name].category == "drugs" then
        if (Items[self.SelectedItem.name].actionCl ~= nil) then
            TriggerEvent(Items[self.SelectedItem.name].actionCl, self.SelectedItem)
            Inventory:Delete()
        end
    elseif Items[self.SelectedItem.name].category == "bspecial" then
        TriggerEvent("Ero_object:SpawnProp", Items[self.SelectedItem.name].prop_bo, Items[self.SelectedItem.name].prop_ve, Items[self.SelectedItem.name].animdi, Items[self.SelectedItem.name].animdl, Items[self.SelectedItem.name].cnt, Items[self.SelectedItem.name].anm2)
        Inventory:Delete()
    else
        if Items[self.SelectedItem.name].actionCl ~= nil and ItemsFunction[self.SelectedItem.name] == nil then
            TriggerEvent(Items[self.SelectedItem.name].actionCl, self.SelectedItem)
        elseif Items[self.SelectedItem.name].action and ItemsFunction[self.SelectedItem.name] == nil then
            TriggerServerEvent(Items[self.SelectedItem.name].action, self.SelectedItem)
        else
            --(dump(ItemsFunction))
            --(self.SelectedItem.name)
            --(ItemsFunction[self.SelectedItem.name])
            if ItemsFunction[self.SelectedItem.name] ~= nil then
                ItemsFunction[self.SelectedItem.name]()
            else
                ShowAboveRadarMessage("~r~Vous ne pouvez pas utiliser cet objet")
            end

            if self.SelectedItem.name == "tel" then
                currPh = self.SelectedItem.id
            end
        end
    end
end
local armed = false
Citizen.CreateThread(
    function()
        while true do
            Citizen.Wait(1000)
            found = false
            pp = GetSelectedPedWeapon(LocalPlayer().Ped)
            if pp ~= GetHashKey("WEAPON_Unarmed") then
                armed = true
                for k, v in pairs(weapon_name) do
                    Wait(200)
                    if GetHashKey(v) == pp then
                        if Inventory.Inventory[k] ~= nil and #Inventory.Inventory[k] == 0 then
                            RemoveWeaponFromPed(LocalPlayer().Ped, pp)
                        elseif Inventory.Inventory[k] == nil then
                            RemoveWeaponFromPed(LocalPlayer().Ped, pp)
                        end
                    end
                end
                Wait(1000)
            else
                armed = false
            end
            Wait(10)
        end
    end
)
combatM = nil
Citizen.CreateThread(
    function()
        while true do
            Citizen.Wait(1)
            if (armed) then
                SetPedSuffersCriticalHits(LocalPlayer().Ped, false)
                combatM = true
            else
                combatM = false
            end
        end
    end
)
local inventoryFilter = {
    Index = 1,
    Label = {"Aucun", "Nourriture", "Arme", "Vêtements", "Documents"},
    Filter = {nil, "food", "weapon", "clothes", "docs"},
    count = 0
}

local inventoryFilt = {
    Index = 1,
    Label = {"Aucun", "Alphabétique", "Croissant", "Décroissant"},
    Filter = {
        nil,
        function(t, a, b)
            return Items[a].label < Items[b].label
        end,
        function(t, a, b)
            return #t[a] < #t[b]
        end,
        function(t, a, b)
            return #t[a] > #t[b]
        end
    },
    count = 0
}
function randDropAnim()
    local randAnim = math.random(7)
    loadAnimDict("mp_weapon_drop")
    TaskPlayAnim(PlayerPedId(), "mp_weapon_drop", "drop_lh", 5.0, 1.0, 1.0, 48, 0.0, 0, 0, 0)
end
function Inventory:GiveItem()
    player = GetPlayerServerIdInDirection(5.0)
    if (player ~= false) then
        count = KeyboardInput("~b~Combien ?", 1, 25)
        count = tonumber(count)
        if count == 1 then
            giveTable = {self.SelectedItem}
            for i = 1, #giveTable, 1 do
                Inventory:RemoveItemToInv(giveTable[i].id, giveTable[i].name)
                TriggerPlayerEvent("inventory:AddItem2", player, giveTable[i])
            end
        else
            if count ~= nil and self:GetItemCount(self.SelectedItem.name) >= count then
                local giveTable = {}
                for i = 1, count, 1 do
                    k = self.Inventory[self.SelectedItem.name]
                    if k.id == self.SelectedItem.id then
                        if self.SelectedItem.data ~= nil and self.SelectedItem.data.equiped ~= nil then
                            self.SelectedItem.data.equiped = false
                        end
                        table.insert(giveTable, self.SelectedItem)
                    else
                        if
                            self.Inventory[self.SelectedItem.name][i].data ~= nil and
                                self.Inventory[self.SelectedItem.name][i].data.equiped ~= nil
                         then
                            self.Inventory[self.SelectedItem.name][i].data.equiped = false
                        end
                        table.insert(giveTable, self.Inventory[self.SelectedItem.name][i])
                    end
                end
                for i = 1, #giveTable, 1 do
                    TriggerPlayerEvent("inventory:AddItem2", player, giveTable[i])
                    Inventory:RemoveItemToInv(giveTable[i].id, giveTable[i].name)
                end
                ShowNotification("~g~Vous avez donné " .. count .. " " .. Items[self.SelectedItem.name].label)
                giveTable = {}
            else
                RageUI.Popup({message = "~r~Vous n'avez pas assez de " .. Items[self.SelectedItem.name].label})
            end
        end
    else
        RageUI.Popup({message = "~r~Aucun joueurs proche"})
    end
    RageUI.GoBack()
end

function Inventory:GetInventory()
    return self.Inventory
end

function Inventory:GetItemCount(item)
    found = 0
    if self.Inventory ~= nil then
        for k, v in pairs(self.Inventory) do
            if k == item then
                if #v <= 0 then
                    found = 0
                else
                    found = #v
                end
            end
        end
    end
    return found
end
Inventory.CurrentWeapon = {
    Label = nil,
    Name = nil
}
function Inventory:RemoveItemToInv(id, item)
    --print("deleting :" ,id, item)
    for k, px in pairs(self.Inventory) do
        local t = px
        if k == item then
            for i = 1, #px, 1 do
                if px[i].id == id then
                    if item == "tel" then
                        if px[i].data.num == MyNumber then
                            MyNumber = nil
                            MyBattery = 0
                            TriggerEvent("gcphone:UpdateBattery", MyBattery)
                            TriggerEvent("gcPhone:myPhoneNumber", MyNumber)
                            TriggerServerEvent("gcPhone:allUpdate")
                        end
                    end
                    table.remove(self.Inventory[item], i)
                    if item == "clothe" then
                        RefreshClothes()
                    end
                    break
                end
            end
        end
    end
    self:RefreshWeight()
end

local itemVariableIncrementForId = 1

function AddItemtoInv(item)
    if item.id == nil then
        print("^1NO ID (CREATING)^0")
        local randomTest = uuid.seeder()
        local uuidForItem = uuid.new(randomTest)
        randomTest = uuid.seeder()
        itemVariableIncrementForId = itemVariableIncrementForId + 1
        uuidForItem = uuidForItem .. "-" .. itemVariableIncrementForId
        print("UUID : " .. uuidForItem)
        item.id = uuidForItem
    end

    Inventory:AddItemToInv(item.name, item.id, item.data, item.label)
end

function AddItemstoInv(items)
    for itemKey, itemValue in pairs(items) do
        if itemValue.id == nil then
            print("^1NO ID (CREATING)^0")
            local randomTest = uuid.seeder()
            local uuidForItem = uuid.new(randomTest)
            randomTest = uuid.seeder()
            itemVariableIncrementForId = itemVariableIncrementForId + 1
            uuidForItem = uuidForItem .. "-" .. itemVariableIncrementForId
            print("UUID : " .. uuidForItem)
            itemValue.id = uuidForItem
        end
        Inventory:AddItemToInv(itemValue.name, itemValue.id, itemValue.data, itemValue.label)
    end
end

RegisterNetEvent("aCore:inventory:addItems")
AddEventHandler(
    "aCore:inventory:addItems",
    function(items)
        AddItemstoInv(items)
    end
)

RegisterNetEvent("inventory:AddItem2")
AddEventHandler(
    "inventory:AddItem2",
    function(t)
        AddItemtoInv(t)
    end
)

AddEventHandler(
    "aCore:EditTel",
    function()
        RageUI.Visible(RMenu:Get("phone", "choose_card"), true)
    end
)
RMenu.Add("phone", "choose_card", RageUI.CreateMenu("aCore", "Cartes bancaire disponibles", 10, 200))
Citizen.CreateThread(
    function()
        while true do
            Wait(1)
            if RageUI.Visible(RMenu:Get("phone", "choose_card")) then
                RageUI.DrawContent(
                    {header = false, glare = false},
                    function()
                        if Inventory.Inventory["bank_card"] ~= nil then
                            for __i = 1, #Inventory.Inventory["bank_card"], 1 do
                                RageUI.Button(
                                    Items["bank_card"].label .. " #" .. Inventory.Inventory["bank_card"][__i].data.number,
                                    nil,
                                    {},
                                    true,
                                    function(_, _, Selected)
                                        if Selected then
                                            local code = KeyboardInput("Veuillez entrer le code", nil, 4)
                                            code = tonumber(code)
                                            if code ~= nil then
                                                if code == Inventory.Inventory["bank_card"][__i].data.code then
                                                    for _i = 1, #Inventory.Inventory["tel"], 1 do
                                                        local x = Inventory.Inventory["tel"][_i]
                                                        if x.id == currPh then
                                                            if x.data.accounts == nil then
                                                                x.data.accounts = {}
                                                            end
                                                            local f = false
                                                            for i = 1, #x.data.accounts, 1 do
                                                                if
                                                                    x.data.accounts[i].account ==
                                                                        Inventory.Inventory["bank_card"][__i].data.account
                                                                then
                                                                    f = true
                                                                    ShowNotification("~r~Carte déjà liée")
                                                                end
                                                            end
                                                            if not f then
                                                                table.insert(
                                                                    x.data.accounts,
                                                                    Inventory.Inventory["bank_card"][__i].data
                                                                )
                                                                ShowNotification("~g~Carte liée")
                                                            end

                                                            CloseAllMenus()
                                                            break
                                                        end
                                                    end
                                                else
                                                    ShowNotification("~r~Code incorrect")
                                                end
                                            end
                                        end
                                    end
                                )
                            end
                        else
                            RageUI.Button(
                                "Vide",
                                nil,
                                {},
                                true,
                                function(_, _, Selected)
                                end)
                        end
                    end
                )
            end
        end
    end
)
exports(
    "getCurrentTel",
    function()
        for i = 1, #Inventory.Inventory["tel"], 1 do
            local x = Inventory.Inventory["tel"][i]
            if x.id == currPh then
                if x.data.accounts == nil then
                    x.data.accounts = {}
                end
                return x.data.accounts
            end
        end
    end
)

RegisterNetEvent("DeleteCard")
AddEventHandler(
    "DeleteCard",
    function(id)
        for i = 1, #Inventory.Inventory["tel"], 1 do
            local x = Inventory.Inventory["tel"][i]
            if x.id == currPh then
                table.remove(x.data.accounts, id + 1)
            end
        end
    end
)
exports("AddItemtoInv", AddItemtoInv)
function Inventory:AddItemToInv(item, id, data, label)
    RageUI.Popup({message = "Vous avez reçu un(e) ~b~" .. string.lower(Items[item].label) .. "(s)"})
    if self.Inventory == nil then
        self.Inventory = {}
    end
    if self.Inventory[item] == nil then
        self.Inventory[item] = {}
    end
    T = self.Inventory[item]
    local cp = nil
    for k, v in pairs(weapon_name) do
        if v == Inventory.CurrentWeapon.Label then
            cp = k
        end
    end
    if item == weapon_munition[cp] then
        AddAmmoToPed(LocalPlayer().Ped, Inventory.CurrentWeapon.Name, 1)
    end
    table.insert(T, {name = item, id = id, data = data, label = label})
    self:RefreshWeight()
end

function Inventory.addItem()
    return Inventory:AddItem()
end
function Inventory:AddItem()
    AddItemtoInv(Inventory.SelectedItem)
    self:RefreshWeight()
end
function Inventory.removeItem(id, name)
    if id == nil then
        id = Inventory.SelectedItem.id
        name = Inventory.SelectedItem.name
    end
    Inventory:RemoveItemToInv(id, name)
    --TriggerServerEvent("inventory:RemoveItem", id,name)
    Inventory:RefreshWeight()
end
function Inventory:RemoveItem(p, k)
    return Inventory.removeItem(p, k)
end
function Inventory:RefreshWeight()
    self.Weight = 0
    if self.Inventory ~= nil then
        for k, v in pairs(self.Inventory) do
            if v[1] ~= nil then
                p = self.Inventory[k]
                if Items[v[1].name] == nil then
                    error(v[1].name .. " invalid")
                end
                self.Weight = self.Weight + (Items[v[1].name].weight * #v)
            end
        end
        TriggerServerEvent("inventory:UpdateWeight", self.Weight)
        RMenu:Get("personnal", "inventory"):SetPageCounter(math.floor(self.Weight, 2) .. "/40KG") --40KG
    end
end

function Inventory:Infos()
    if Items[Inventory.SelectedItem.name].category == "weapon" then
        if Inventory.SelectedItem.data == nil then
            Inventory.SelectedItem.data = {
                serial = "~r~Illisible"
            }
        end
        return ShowNotification("~b~Numéro de série : ~o~" .. Inventory.SelectedItem.data.serial or "~r~Illisible")
    else
        if Inventory.SelectedItem.data == nil then
            return ShowNotification("~r~Item invalide")
        end
        if Infos[Inventory.SelectedItem.name] ~= nil then
            Infos[Inventory.SelectedItem.name]()
        end
    end
end

function Inventory:Objsupp()
    if Objsupp[Inventory.SelectedItem.name] ~= nil then
        Objsupp[Inventory.SelectedItem.name]()
    end
end

function Inventory:Rename()
    label = KeyboardInput("~b~Renommer l'item", self.SelectedItem.label, 25)
    if label ~= self.SelectedItem.rename then
        for k, px in pairs(self.Inventory) do
            if k == self.SelectedItem.name then
                for i = 1, #px, 1 do
                    if px[i].id == self.SelectedItem.id then
                        px[i].label = label
                    end
                end
            end
        end
    end
end
function RemoveItemToInv(id, name)
    Inventory:RemoveItemToInv(Inventory.SelectedItem.id, Inventory.SelectedItem.name)
    --TriggerServerEvent("inventory:RemoveItem",Inventory.SelectedItem.id,Inventory.SelectedItem.name)
end

function deleteRandomItem(name)
    local inv = Inventory.Inventory[name]
    local _i = nil
    for i = 1, #inv, 1 do
        _i = inv[i]
        if _i ~= nil then
            break
        end
    end
    print(dump(_i))
    Inventory:RemoveItemToInv(_i.id, _i.name)
    --TriggerServerEvent("inventory:RemoveItem",_i.id,_i.name)
end
function GetItemCount(name)
    return Inventory:GetItemCount(name)
end
exports("GetItemCount", GetItemCount)
exports("RemoveItemToInv", RemoveItemToInv)
exports("deleteRandomItem", deleteRandomItem)
RegisterNetEvent("inventory:removeItem")
AddEventHandler(
    "inventory:removeItem",
    function(id, name)
        Inventory:RemoveItemToInv(id, name)
    end
)

RegisterNetEvent("inventory:AddItem")
AddEventHandler(
    "inventory:AddItem",
    function(item, data, label, id)
        Inventory:AddItemToInv(item.name, item.id, item.data, item.label)
        --Inventory:AddItemToInv(item, id, data, label)
    end
)
local currentHoverItem = nil
RMenu:Get("personnal", "inventory"):AddInstructionButton(
    {
        [1] = GetControlInstructionalButton(0, Keys["L"], 0),
        [2] = "Jeter"
    }
)
local currentfilter = nil
local blackList = {"dollar1", "dollar5", "dollar10", "dollar50", "dollar100", "dollar500"}
Citizen.CreateThread(
    function()
        SetMinimapComponent(15, true, -1)
        SetVehicleModelIsSuppressed(GetHashKey("zentorno"), true)
        SetVehicleModelIsSuppressed(GetHashKey("adder"), true)
        SetVehicleModelIsSuppressed(GetHashKey("trash"), true)
        SetVehicleModelIsSuppressed(GetHashKey("trash2"), true)
        SetVehicleModelIsSuppressed(GetHashKey("mule"), true)
        SetVehicleModelIsSuppressed(GetHashKey("mule2"), true)
        SetVehicleModelIsSuppressed(GetHashKey("mule3"), true)
        SetVehicleModelIsSuppressed(GetHashKey("turismor"), true)
        SetVehicleModelIsSuppressed(GetHashKey("firetruck"), true)
        SetVehicleModelIsSuppressed(GetHashKey("tractor2"), true)
        SetVehicleModelIsSuppressed(GetHashKey("blimp"), true)
        SetVehicleModelIsSuppressed(GetHashKey("pounder"), true)
        SetVehicleModelIsSuppressed(GetHashKey("tanker2"), true)
        SetVehicleModelIsSuppressed(GetHashKey("trailers2"), true)
        SetVehicleModelIsSuppressed(GetHashKey("trailers3"), true)
        SetVehicleModelIsSuppressed(GetHashKey("trailers4"), true)
        SetVehicleModelIsSuppressed(GetHashKey("double"), true)
        SetVehicleModelIsSuppressed(GetHashKey("infernus"), true)
        SetVehicleModelIsSuppressed(GetHashKey("hakuchou"), true)
        SetVehicleModelIsSuppressed(GetHashKey("sultan"), true)
        SetVehicleModelIsSuppressed(GetHashKey("benson"), true)
        SetVehicleModelIsSuppressed(GetHashKey("police"), true)
        SetVehicleModelIsSuppressed(GetHashKey("police3"), true)
        SetVehicleModelIsSuppressed(GetHashKey("trailers"), true)
        SetVehicleModelIsSuppressed(GetHashKey("buzzard2"), true)
        SetVehicleModelIsSuppressed(GetHashKey("polmav"), true)
        SetVehicleModelIsSuppressed(GetHashKey("tourbus"), true)
        SetVehicleModelIsSuppressed(GetHashKey("rapidgt2"), true)
        SetVehicleModelIsSuppressed(GetHashKey("rapidgt"), true)
        SetVehicleModelIsSuppressed(GetHashKey("jester"), true)
        SetAudioFlag("WantedMusicDisabled", false)
        SetThisScriptCanRemoveBlipsCreatedByAnyScript(true)
        while true do
            Wait(1)

            if RageUI.Visible(RMenu:Get("personnal", "inventory")) then
                if IsControlJustPressed(0, Keys["L"]) then
                    if currentHoverItem ~= nil then
                        local count = KeyboardInput("Combien ? ", nil, 3)
                        count = tonumber(count)
                        local inventory = Inventory.Inventory
                        if count ~= nil and #inventory[currentHoverItem] - count >= 0 then
                            local v = inventory[currentHoverItem]
                            local _v = v
                            local items = {}
                            for i = 1, count, 1 do
                                if _v[i] ~= nil then
                                    items[i] = {id = _v[i].id, name = currentHoverItem}
                                end
                            end
                            local ped = PlayerPedId()
                            local coords = GetEntityCoords(ped)
                            local forward = GetEntityForwardVector(ped)
                            local x, y, z = table.unpack(coords + forward)
                            local coords = {
                                x = x,
                                y = y,
                                z = z - 1.0
                            }

                            TriggerPlayerEvent("newProps", -1, items, coords)
                            for i = 1, #items, 1 do
                                --TriggerServerEvent("inventory:RemoveItem",items[i].id,items[i].name)
                                Inventory:RemoveItemToInv(items[i].id, items[i].name)
                            end
                        end
                    else
                        ShowNotification("~r~Vous n'êtes pas sur un item")
                    end
                end
                RageUI.DrawContent(
                    {header = true, glare = true},
                    function()
                        inventoryFilter.count = 0
                        RageUI.Button(
                            "Portefeuille",
                            nil,
                            {},
                            true,
                            function(_, _, S)
                            end,
                            RMenu:Get("personnal", "wallet")
                        )
                        RageUI.List(
                            "Trier par",
                            inventoryFilt.Label,
                            inventoryFilt.Index,
                            nil,
                            {},
                            true,
                            function(_, Active, Selected, Index)
                                inventoryFilt.Index = Index
                                currentfilter = inventoryFilt.Filter[Index]
                            end
                        )
                        RageUI.List(
                            "Filtre",
                            inventoryFilter.Label,
                            inventoryFilter.Index,
                            nil,
                            {},
                            true,
                            function(_, Active, Selected, Index)
                                inventoryFilter.Index = Index
                                CurrentFilter = inventoryFilter.Filter[Index]
                                if Selected then
                                    local filter = KeyboardInput("Entrez un filtre", nil, 250)
                                    filter = tostring(filter)
                                    local found = false
                                    for i = 1, #inventoryFilter.Label, 1 do
                                        if inventoryFilter.Label[i] == filter then
                                            CurrentFilter = inventoryFilter.Filter[i]
                                            inventoryFilter.Index = i
                                            found = true
                                        end
                                    end
                                    if tostring(filter) ~= nil and filter ~= "" and found then
                                        CurrentFilter = filter
                                    elseif tostring(filter) == nil and filter == "" then
                                        CurrentFilter = nil
                                    else
                                        ShowAboveRadarMessage("Filtre ~r~invalide")
                                    end
                                end
                            end
                        )
                        if tableCount(Inventory.Inventory) == 0 then
                            RageUI.Button(
                                "Vide",
                                nil,
                                {},
                                true,
                                function(_, _, _)
                                end
                            )
                        else
                            currentHoverItem = nil
                            for k, v in spairs(Inventory.Inventory, currentfilter) do
                                local f = false
                                for i = 1, #blackList, 1 do
                                    if blackList[i] == k then
                                        f = true
                                    end
                                end
                                if not f then
                                    if CurrentFilter == nil or Items[k].category == CurrentFilter then
                                        if #v > 0 then
                                            inventoryFilter.count = inventoryFilter.count + 1
                                            if #v == 1 then
                                                RageUI.Button(
                                                    v[1].label ~= nil and Items[k].label .. " '" .. v[#v].label .. "'" or
                                                        Items[k].label,
                                                    nil,
                                                    {RightLabel = 1},
                                                    true,
                                                    function(_, Active, Selected)
                                                        if Selected then
                                                            Inventory.SelectedItem = v[1]
                                                        end
                                                        if Active then
                                                            currentHoverItem = k
                                                        end
                                                    end,
                                                    RMenu:Get("personnal", "actions_1")
                                                )
                                            else
                                                RageUI.Button(
                                                    Items[k].label,
                                                    nil,
                                                    {RightLabel = #v .. "→"},
                                                    true,
                                                    function(_, A, Selected)
                                                        if Selected then
                                                            Inventory.Selected = v
                                                        end

                                                        if A then
                                                            currentHoverItem = k
                                                        end
                                                    end,
                                                    RMenu:Get("personnal", "multi_inventory")
                                                )
                                            end
                                        end
                                    end
                                end
                            end
                            if inventoryFilter.count == 0 then
                                RageUI.Button(
                                    "Vide",
                                    nil,
                                    {},
                                    true,
                                    function()
                                    end
                                )
                            end
                        end
                    end,
                    function()
                    end
                )
            end

            if RageUI.Visible(RMenu:Get("personnal", "multi_inventory")) then
                RageUI.DrawContent(
                    {header = true, glare = true},
                    function()
                        for i = 1, #Inventory.Selected, 1 do
                            RageUI.Button(
                                Inventory.Selected[i].label ~= nil and
                                    Items[Inventory.Selected[i].name].label ..
                                        " '" .. Inventory.Selected[i].label .. "'" or
                                    Items[Inventory.Selected[i].name].label,
                                nil,
                                {RightLabel = 1},
                                true,
                                function(_, _, Selected)
                                    if Selected then
                                        Inventory.SelectedItem = Inventory.Selected[i]
                                    end
                                end,
                                RMenu:Get("personnal", "actions_2")
                            )
                        end
                    end,
                    function()
                    end
                )
            end

            if
                RageUI.Visible(RMenu:Get("personnal", "actions_1")) or
                    RageUI.Visible(RMenu:Get("personnal", "actions_2"))
             then
                RageUI.DrawContent(
                    {header = true, glare = true},
                    function()
                        RageUI.Button(
                            "Utiliser",
                            nil,
                            {},
                            true,
                            function(_, _, Selected)
                                if Selected then
                                    RageUI.GoBack()
                                    Wait(10)
                                    Inventory:UseItem()
                                end
                            end
                        )

                        RageUI.Button(
                            "Renommer",
                            nil,
                            {},
                            true,
                            function(_, _, Selected)
                                if Selected then
                                    Inventory:Rename()
                                end
                            end
                        )

                        RageUI.Button(
                            "Donner",
                            nil,
                            {},
                            true,
                            function(_, A, Selected)
                                if Selected then
                                    Inventory:GiveItem()
                                end
                                if A then
                                    HoverPlayer()
                                end
                            end
                        )

                        RageUI.Button(
                            "~r~Jeter",
                            nil,
                            {},
                            true,
                            function(_, _, Selected)
                                if Selected then
                                    Inventory:Throw()
                                --Inventory:Delete()
                                end
                            end
                        )
                        if Objsupp[Inventory.SelectedItem.name] ~= nil then
                            RageUI.Button(
                                "Enlever objet",
                                nil,
                                {},
                                true,
                                function(_, _, Selected)
                                    if Selected then
                                        Inventory:Objsupp()
                                    end
                                end
                            )
                        end
                        if
                            Infos[Inventory.SelectedItem.name] ~= nil or
                                Items[Inventory.SelectedItem.name].category == "weapon"
                         then
                            RageUI.Button(
                                "Informations",
                                nil,
                                {},
                                true,
                                function(_, _, Selected)
                                    if Selected then
                                        Inventory:Infos()
                                    end
                                end
                            )
                        end
                    end,
                    function()
                    end
                )
            end
        end
    end
)

function Inventory:Throw()
    local ped = PlayerPedId()
    local coords = GetEntityCoords(ped)
    local forward = GetEntityForwardVector(ped)
    local x, y, z = table.unpack(coords + forward)
    local coords = {
        x = x,
        y = y,
        z = z - 1.0
    }
    local item = {Inventory.SelectedItem}
    TriggerPlayerEvent("newProps", -1, item, coords)
    Inventory:Delete()
    randDropAnim()
end

function GetItemsData()
    return Items
end

Citizen.CreateThread(
    function()
        while true do
            Wait(3000)
            if Job:Get() ~= nil then
                if Inventory.Inventory == nil then
                    Inventory:Load()
                end
                if
                    #json.encode(Inventory.Inventory) ~= oldTableLenght and
                        #json.encode(Inventory.Inventory) ~= #json.encode({})
                 then
                    oldTableLenght = #json.encode(Inventory.Inventory)
                    local t = json.encode(Inventory.Inventory)
                    --print("SAVE")
                    TriggerServerEvent("inventory:SaveInventory", t)
                    Wait(0)
                end
            end
        end
    end
)

function saveInventory()
    local t = json.encode(Inventory.Inventory)
    oldTableLenght = #t
    TriggerServerEvent("inventory:SaveInventory", t)
end

Citizen.CreateThread(
    function()
        while true do
            Wait(1000 * 300)
            if Job:Get() ~= nil then
                local t = json.encode(Inventory.Inventory)
                ShowNotification("~g~Sauvegarde automatique de l'inventaire.")
                TriggerServerEvent("inventory:SaveInventory", t)
            end
        end
    end
)
