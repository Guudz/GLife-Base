---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Dylan Malandain.
--- DateTime: 29/08/2019 00:08
---
Settings = setmetatable({}, Settings)
Settings.Color = {R = 255, G = 255, B = 255}
local l = {}
local _l = {}
local oldIIIII = nil
oldDemarche = 1
for i = 1 , #demarcheAnim , 1 do
    table.insert(_l,demarcheAnim[i].name)
    l[demarcheAnim[i].name] = demarcheAnim[i].dict
end
function Settings:Load()
    TriggerServerCallback("getSettings",function(Data)
        --print(Data[1].binds,"ls")   
        if Data[1] ~= nil then
            if Data[1].binds ~= nil then
                self.Bind = json.decode(Data[1].binds)
            end
            if Data[1].colors ~= nil then
                self.Color = json.decode(Data[1].colors)
            end
            oldDemarche = Data[1].demarche
            LocalPlayer().Demarche = Data[1].demarche
            --self.FarmLimit = Data[1].farm_limit
            self:Format()
        end
    end)
end

function Settings:Format()
    if self.Bind == nil then self.Bind = {} end
    for k, v in pairs(self.Bind) do
        KeySettings:Clear("keyboard", k, "bind")
        KeySettings:Add(
            "keyboard",
            k,
            function()
                doAnim(v.anim, nil, v.func)
            end,
            "bind"
        )
    end
    RMenu:ChangeAllColor(self.Color)
    TriggerServerEvent("saveMyColor", self.Color)
    TriggerServerEvent("saveMyBind", self.Bind)
end

RegisterCommand(
    "loadsettings",
    function()
        Settings:Load()
    end
)

RegisterNetEvent("vehicle:AddTempClé")
AddEventHandler(
    "vehicle:AddTempClé",
    function(plate, label)
        veh = GetMyVehicles()

        table.insert(veh.preter, {plate = plate, label = label})
        RageUI.Popup({message = "Vous avez reçu de nouvelle clé"})
        SaveMyVehicles(veh)
    end
)

RMenu.Add(
    "personnal",
    "actions",
    RageUI.CreateSubMenu(RMenu:Get("personnal", "main"), "Actions", "Actions disponibles")
)

RMenu.Add(
    "personnal",
    "infos",
    RageUI.CreateSubMenu(RMenu:Get("personnal", "main"), "Informations", "Informations disponibles")
)

RMenu.Add(
    "personnal",
    "actions_mykey",
    RageUI.CreateSubMenu(RMenu:Get("personnal", "actions"), "Mes clés", "Clés possédées")
)

-- Settings
RMenu.Add(
    "personnal",
    "settings",
    RageUI.CreateSubMenu(RMenu:Get("personnal", "main"), "Préférence", "Settings disponibles")
)

RMenu.Add("personnal", "illegal", RageUI.CreateSubMenu(RMenu:Get("personnal", "actions"), "Informations", "Ma mission"))

RMenu.Add(
    "personnal",
    "settings_map",
    RageUI.CreateSubMenu(RMenu:Get("personnal", "settings"), "Préférence", "Personnaliser la carte")
)

RMenu.Add(
    "personnal",
    "settings_customColor",
    RageUI.CreateSubMenu(RMenu:Get("personnal", "settings"), "Préférence", "Personnaliser le menu")
)

RMenu.Add(
    "personnal",
    "settings_customDemarche",
    RageUI.CreateSubMenu(RMenu:Get("personnal", "settings"), "Préférence", "Personnaliser ma démarche")
)
local listMoney = 1
local moneyLabel = {"Propre", "~r~Sale"}
local casqueList = {
    [19] = 68,
    [51] = 69,
    [52] = 54,
    [63] = 73,
    [74] = 75,
    [79] = 80,
    [81] = 82,
    [92] = 93
}
local vesteList = {
    [11] = 5,
    [33] = 32,
    [61] = 60,
    [76] = 75,
    [88] = 89,
    [101] = 100
}
local function Visor()
    local animstring = "anim@mp_helmets@on_foot"
    local a = nil
    if IsPedInAnyVehicle(LocalPlayer().Ped) then
        animstring = "anim@mp_helmets@on_bike@quad"
    end
    if not HasAnimDictLoaded(animstring) then
        RequestAnimDict(animstring)
        while (not HasAnimDictLoaded(animstring)) do
            Wait(0)
        end
    end
    local propsIndex = GetPedPropIndex(PlayerPedId(), 0) + 1
    if casqueList[propsIndex] ~= nil then
        if not visor then
            a = "visor_up"
        else
            a = "visor_down"
        end
        ClearPedTasks(LocalPlayer().Ped)
        TaskPlayAnim(LocalPlayer().Ped, animstring, a, 8.0, 1.0, -1, 48, 0.0, false, false, false)
        Wait(490)
        if not visor then
            SetPedPropIndex(
                LocalPlayer().Ped,
                0,
                casqueList[propsIndex] - 1,
                GetPedPropTextureIndex(LocalPlayer().Ped, 0),
                true
            )
        else
            SetPedPropIndex(
                LocalPlayer().Ped,
                0,
                casqueList[propsIndex] - 1,
                GetPedPropTextureIndex(LocalPlayer().Ped, 0),
                true
            )
        end
    elseif visor then
        for k, v in pairs(casqueList) do
            if v == propsIndex then
                if not visor then
                    a = "visor_up"
                else
                    a = "visor_down"
                end
                ClearPedTasks(LocalPlayer().Ped)
                TaskPlayAnim(LocalPlayer().Ped, animstring, a, 8.0, 1.0, -1, 48, 0.0, false, false, false)
                Wait(490)
                if not visor then
                    SetPedPropIndex(LocalPlayer().Ped, 0, k - 1, GetPedPropTextureIndex(LocalPlayer().Ped, 0), true)
                else
                    SetPedPropIndex(LocalPlayer().Ped, 0, k - 1, GetPedPropTextureIndex(LocalPlayer().Ped, 0), true)
                end
            end
        end
    end
    visor = not visor
end
local veste = false
local function Veste()
    local ped = PlayerPedId()
    local vesteIndex = GetPedDrawableVariation(ped, 11) + 1
    local animstring = "clothingtie"
    local a = "try_tie_neutral_b"
    if not HasAnimDictLoaded(animstring) then
        RequestAnimDict(animstring)
        while (not HasAnimDictLoaded(animstring)) do
            Wait(0)
        end
    end
    ClearPedTasks(LocalPlayer().Ped)
    TaskPlayAnim(LocalPlayer().Ped, animstring, a, 8.0, 1.0, -1, 48, 0.0, false, false, false)
    Wait(490)
    if vesteList[vesteIndex] ~= nil then
        SetPedComponentVariation(ped, 11, vesteList[vesteIndex] - 1, GetPedTextureVariation(ped, 11))
    elseif veste then
        for k, v in pairs(vesteList) do
            if v == vesteIndex then
                SetPedComponentVariation(ped, 11, k - 1, GetPedTextureVariation(ped, 11))
            end
        end
    end
    veste = not veste
end
RegisterCommand(
    "-visor",
    function()
        -- Visor()
    end,
    false
)
RegisterCommand(
    "+visor",
    function()
        -- Visor()
    end,
    false
)
RegisterCommand(
    "visor",
    function()
        -- Visor()
    end,
    false
)

RegisterCommand(
    "veste",
    function()
        --   Veste()
    end,
    false
)

RegisterCommand(
    "-veste",
    function()
        --   Veste()
    end,
    false
)
RegisterCommand(
    "+veste",
    function()
        --   Veste()
    end,
    false
)
local srcc = nil
local oldSave = 0
Citizen.CreateThread(
    function()
        AddTextEntry("PM_PANE_CFX", "aCore")
        while true do
            Wait(1)
            --    print(GetGameTimer())
            if RageUI.Visible(RMenu:Get("personnal", "infos")) then
                RageUI.DrawContent(
                    {header = true, glare = true},
                    function()
                        if srcc == nil then
                            TriggerServerCallback(
                                "core:GetMysource",
                                function(_src)
                                    srcc = _src
                                end
                            )
                        end
                        RageUI.Button(
                            "Limite de farm journaliére",
                            nil,
                            {RightLabel = LocalPlayer().FarmLimit .. "/400"},
                            true,
                            function(_, _, Selected)
                                if Selected then
                                end
                            end
                        )
                        if Job:Get() ~= nil then
                            RageUI.Button(
                                "Métier",
                                nil,
                                {
                                    RightLabel = Job:Get().label ..
                                        " | " .. Jobs[Job:Get().name].grade[Job:Get().gradenum].label
                                },
                                true,
                                function(_, _, Selected)
                                    if Selected then
                                    end
                                end
                            )
                        end

                        if Orga:Get() ~= nil then
                            RageUI.Button(
                                "Organisation",
                                nil,
                                {
                                    RightLabel = Orga:Get().label ..
                                        " | " .. Jobs[Orga:Get().name].grade[Orga:Get().gradenum].label
                                },
                                true,
                                function(_, _, Selected)
                                    if Selected then
                                    end
                                end
                            )
                        end

                        RageUI.Button("Appuye ici pour voir ton ID", nil, {RightLabel = "→→"}, true, function(Hovered, Active, Selected)
                            if (Selected) then
                                RageUI.Popup({message = 'Ton ID est le : ~r~'.. GetPlayerServerId(PlayerId()) ..''})
                            end
                        end)
                    end
                )
            end
            if RageUI.Visible(RMenu:Get("personnal", "actions")) then
                RageUI.DrawContent(
                    {header = true, glare = true},
                    function()
                        RageUI.Checkbox(
                            "Service",
                            "Permet d'activer ou désactiver ~o~votre service",
                            inServiceS,
                            {},
                            function(Hovered, Ative, Selected, Checked)
                                inServiceS = Checked
                                if Selected then
                                    UpdateService()
                                    RageUI.Popup(
                                        {
                                            message = Checked and "Vous avez ~g~activé~s~ votre service" or
                                                "Vous avez ~r~désactivé~s~ votre service",
                                        }
                                    )
                                    if Job:Get().radios ~= nil then
                                        if not Checked then
                                            for i = 1, #Job:Get().radios, 1 do
--                                                exports["rp-radio"]:GivePlayerAccessToFrequency(Job:Get().radios[i])
                                            end
                                        else
                                            for i = 1, #Job:Get().radios, 1 do
--                                                exports["rp-radio"]:RemovePlayerAccessToFrequency(Job:Get().radios[i])
                                            end
                                        end
                                    end
                                end
                            end
                        )
                        RageUI.Checkbox(
                            "Visière",
                            "",
                            visor,
                            {},
                            function(Hovered, Ative, Selected, Checked)
                                if Selected then
                                    Visor()
                                end
                            end
                        )
                        RageUI.Checkbox(
                            "Veste",
                            "",
                            veste,
                            {},
                            function(Hovered, Ative, Selected, Checked)
                                if Selected then
                                    Veste()
                                end
                            end
                        )
                        RageUI.Button(
                            "Annuler un appel",
                            nil,
                            {RightLabel = "→→"},
                            true,
                            function(_, _, Selected)
                                if Selected then
                                    ShowNotification("~r~Vous avez annulé l'appel")
                                    TriggerEvent("call:cancelCall")
                                end
                            end
                        )
                        if currentMission.label ~= nil then
                            RageUI.Button(
                                "Ma mission illégale",
                                nil,
                                {},
                                true,
                                function(_, _, Selected)
                                end,
                                RMenu:Get("personnal", "illegal")
                            )
                        end
                        RageUI.Button(
                            "Synchroniser mon personnage",
                            nil,
                            {RightLabel = "→→"},
                            true,
                            function(_, _, Selected)
                                if oldSave == 0 then
                                    oldSave = 0
                                end
                                if Selected and oldSave - GetGameTimer() <= 0 then
                                    saveInventory()
                                    TriggerServerEvent("handler:savePosition", EntityGetCoords(LocalPlayer().Ped))
                                    RageUI.Popup(
                                        {
                                            message = "~w~Personnage ~g~\nSynchronisation effectuée.",
                                        }
                                    )
                                    oldSave = GetGameTimer() + 50000
                                elseif Selected then
                                    ShowNotification("~r~Vous avez déjà sauvegardé votre personnage il y a peu")
                                end
                            end
                        )
                    end,
                    function()
                    end
                )
            end
            if RageUI.Visible(RMenu:Get("personnal", "actions_mykey")) then
                RageUI.DrawContent(
                    {header = true, glare = true},
                    function()
                        local vehicles = GetMyVehicles()
                        for i = 1, #vehicles.data, 1 do
                            if vehicles.data[i].settings ~= nil then
                                vehicles.data[i].plate = json.decode(vehicles.data[i].settings).plate
                            end
                            RageUI.Button(
                                vehicles.data[i].label ..
                                    " ~g~[~HUD_COLOUR_NET_PLAYER19~" .. vehicles.data[i].plate .. "~g~] ",
                                nil,
                                {},
                                true,
                                function(_, _, Selected)
                                    if Selected then
                                        if vehicles.data[i].settings ~= nil then
                                            local m = true
                                            RageUI.Popup(
                                                {
                                                    message = "Voulez vous prêter vos ~b~clés?~s~\n~g~E ~s~pour accepter\n~r~L~s~ pour refuser"
                                                }
                                            )
                                            Citizen.CreateThread(
                                                function()
                                                    Wait(5000)
                                                    if m then
                                                        m = false
                                                        RageUI.Popup({message = "~r~Annulé"})
                                                    end
                                                end
                                            )
                                            Citizen.CreateThread(
                                                function()
                                                    while m do
                                                        Wait(1)
                                                        HoverPlayer()
                                                        if IsControlJustPressed(0, Keys["E"]) then
                                                            player = GetPlayerServerIdInDirection(8.0)
                                                            if (player ~= false) then
                                                                RageUI.Popup({message = "~g~Vous avez prêter vos clés"})
                                                                TriggerServerEvent(
                                                                    "vehicle:PreterCle",
                                                                    player,
                                                                    vehicles.data[i].plate,
                                                                    vehicles.data[i].label
                                                                )
                                                            else
                                                                RageUI.Popup({message = "~r~Aucun joueurs proche"})
                                                            end
                                                            m = false
                                                        end
                                                        if IsControlJustPressed(0, Keys["L"]) then
                                                            m = false
                                                            RageUI.Popup({message = "~r~Annulé"})
                                                        end
                                                    end
                                                end
                                            )
                                        end
                                    end
                                end
                            )
                        end
                        if #vehicles.preter > 0 then
                            RageUI.CenterButton(
                                "~b~↓↓↓ ~s~Autres véhicules ~b~↓↓↓",
                                nil,
                                {},
                                true,
                                function(_, _, Selected)
                                end
                            )
                            for i = 1, #vehicles.preter, 1 do
                                RageUI.Button(
                                    vehicles.preter[i].label ..
                                        " ~g~[~HUD_COLOUR_NET_PLAYER19~" .. vehicles.preter[i].plate .. "~g~] ",
                                    nil,
                                    {},
                                    true,
                                    function(_, _, Selected)
                                        if Selected then
                                        end
                                    end
                                )
                            end
                        end
                    end,
                    function()
                    end
                )
            end
        end
    end
)
function dump(o)
    if type(o) == "table" then
        local s = "{ "
        for k, v in pairs(o) do
            if type(k) ~= "number" then
                k = '"' .. k .. '"'
            end
            s = s .. "[" .. k .. "] = " .. dump(v) .. ","
        end
        return s .. "} "
    else
        return tostring(o)
    end
end
local HUD = true
Citizen.CreateThread(
    function()
        Settings:Load()
        RMenu:Get("personnal", "settings").CinemaMode = false
        RMenu:Get("personnal", "settings").Hud = true


        while true do
            Wait(1)
            if RageUI.Visible(RMenu:Get("personnal", "settings")) then
                local self = RMenu:Get("personnal", "settings")
                local Player = LocalPlayer()
                RageUI.DrawContent(
                    {header = true, glare = true},
                    function()
                        RageUI.Checkbox(
                            "Mode cinéma",
                            "Permet d'activer/désactiver le mode ~o~cinéma",
                            self.CinemaMode,
                            {},
                            function(Hovered, Ative, Selected, Checked)
                                self.CinemaMode = Checked
                                if Selected then
                                    Player.Hud = false
                                    if not Checked then
                                        Player.Hud = true
                                    end
                                    Player.UpdateHud()
                                    TriggerEvent("displayNourriture", not Checked)
                                    TriggerEvent("speedo:display", not Checked)
                                end
                            end
                        )
                        RageUI.Checkbox(
                            "Minimap",
                            "Permet d'activer/désactiver la ~o~minimap",
                            Minimap,
                            {},
                            function(Hovered, Ative, Selected, Checked)
                                if Selected then
                                    Minimap = Checked
                                    if Minimap == true then
                                        DisplayRadar(false)
                                    else
                                        DisplayRadar(true)
                                    end
                                end
                            end
                        )
                        RageUI.Checkbox(
                            "HUD",
                            "Permet d'activer/désactiver ~o~l'HUD",
                            HUD,
                            {},
                            function(Hovered, Ative, Selected, Checked)
                                if Selected then
                                    HUD = Checked
                                    TriggerEvent("displayNourriture", Checked)
                                end
                            end
                        )
                        RageUI.Button(
                            "Personnaliser le menu",
                            "Permet de personnaliser les ~o~couleur ~s~du menu",
                            {RightLabel = "→→"},
                            true,
                            function(_, _, Selected)
                            end,
                            RMenu:Get("personnal", "settings_customColor")
                        )
                        if _l[LocalPlayer().Demarche] == nil then
                            LocalPlayer().Demarche = 1
                        end
                    end,
                    function()
                    end
                )
            end
            if RageUI.Visible(RMenu:Get("personnal", "settings_map")) then
                RageUI.DrawContent(
                    {header = true, glare = true},
                    function()
                        local self = RMenu:Get("personnal", "settings_map")
                        local blipsLabel = {}
                        for k, v in pairs(Blips.Data) do
                            table.insert(blipsLabel, k)
                        end
                        --   --(json.encode(blipsLabel))
                        RageUI.List(
                            "Blips",
                            blipsLabel,
                            self.ListIndex,
                            nil,
                            {},
                            true,
                            function(_, Active, Selected, Index)
                                self.ListIndex = Index
                            end
                        )
                        RageUI.Checkbox(
                            "Afficher",
                            "Permet d'activer/désactiver l'affichage du ~o~marqueur~s~ sur la carte",
                            Blips.Data[blipsLabel[self.ListIndex]][1].isShow,
                            {},
                            function(_, _, Selected, Checked)
                                Blips.Data[blipsLabel[self.ListIndex]][1].isShow = Checked
                                -- TODO
                            end
                        )
                        local c = Blips.Data[blipsLabel[self.ListIndex]]
                    end,
                    function()
                    end
                )
            end
            if RageUI.Visible(RMenu:Get("personnal", "settings_customDemarche")) then
                local self = RMenu:Get("personnal", "settings_customDemarche")
                RageUI.DrawContent({header = true, glare = true},function()

                end)
            end
            if RageUI.Visible(RMenu:Get("personnal", "settings_customColor")) then
                local self = RMenu:Get("personnal", "settings_customColor")
                if Settings.Color.R == nil then Settings.Color = {R=255,G=255,B=255} end
                self.EnableMouse = true
                RageUI.DrawContent(
                    {header = true, glare = true},
                    function()
                        RageUI.Progress(
                            "Couleur 1 (R)",
                            Settings.Color.R,
                            255,
                            nil,
                            true,
                            true,
                            function(_, _, Selected, Color)
                                if Selected then
                                    count = KeyboardInput("~b~Entrez une couleur", nil, 3)
                                    count = tonumber(count)
                                    if count ~= nil and count <= 255 then
                                        Color = count
                                    end
                                end
                                Settings.Color.R = Color
                            end
                        )
                        RageUI.Progress(
                            "Couleur 2 (G)",
                            Settings.Color.G,
                            255,
                            nil,
                            true,
                            true,
                            function(_, _, Selected, Color)
                                if Selected then
                                    count = KeyboardInput("~b~Entrez une couleur", nil, 3)
                                    count = tonumber(count)
                                    if count ~= nil and count <= 255 then
                                        Color = count
                                    end
                                end
                                Settings.Color.G = Color
                            end
                        )
                        RageUI.Progress(
                            "Couleur 3 (B) ",
                            Settings.Color.B,
                            255,
                            nil,
                            true,
                            true,
                            function(_, _, Selected, Color)
                                if Selected then
                                    count = KeyboardInput("~b~Entrez une couleur", nil, 3)
                                    count = tonumber(count)
                                    if count ~= nil and count <= 255 then
                                        Color = count
                                    end
                                end
                                Settings.Color.B = Color
                            end
                        )

                        RageUI.Button(
                            "Valider",
                            "",
                            {
                                Color = {
                                    BackgroundColor = {0, 150, 0, 25}
                                }
                            },
                            true,
                            function(_, _, Selected)
                                if Selected then
                                    RMenu:ChangeAllColor(Settings.Color)
                                    TriggerServerEvent("saveMyColor", Settings.Color)
                                end
                            end
                        )
                        RMenu:Get("personnal", "settings_customColor"):EditSpriteColor(Settings.Color)
                    end,
                    function()
                    end
                )
            end
            if RageUI.Visible(RMenu:Get("personnal", "settings_gestionAnim")) then
                RageUI.DrawContent(
                    {header = true, glare = true},
                    function()
                        if Settings.Bind == nil or tableCount(Settings.Bind) == 0 then
                            RageUI.Button(
                                "Vide",
                                nil,
                                {},
                                true,
                                function(_, _, Selected)
                                end
                            )
                        else
                            for k, v in pairs(Settings.Bind) do
                                RageUI.Button(
                                    "~b~[" .. k .. "]~s~ " .. v.name,
                                    nil,
                                    {},
                                    true,
                                    function(_, _, Selected)
                                        if Selected then
                                            Settings.Bind[k] = nil
                                            TriggerServerEvent("saveMyBind", Settings.Bind)
                                        end
                                    end
                                )
                            end
                        end
                    end
                )
            end
            if RageUI.Visible(RMenu:Get("personnal", "settings_bindAnim")) then
                local self = RMenu:Get("personnal", "settings_bindAnim")

                RageUI.DrawContent(
                    {header = true, glare = true},
                    function()
                        RageUI.Button(
                            "Supprimer ses animations",
                            nil,
                            {},
                            true,
                            function(_, _, Selected)
                            end,
                            RMenu:Get("personnal", "settings_gestionAnim")
                        )

                        RageUI.List(
                            "Touche",
                            self.ArrayTouches,
                            self.IndexTouches,
                            nil,
                            {},
                            true,
                            function(_, _, Selected, Index)
                                self.IndexTouches = Index
                            end
                        )

                        RageUI.List(
                            "Catégorie",
                            self.ArrayCategorie,
                            self.IndexCategorie,
                            nil,
                            {},
                            true,
                            function(_, _, Selected, Index)
                                if Index ~= self.IndexCategorie then
                                    self.IndexCategorie = Index

                                    self.ArrayAnim = {}

                                    for i = 1, #Animations[self.ArrayCategorie[Index]], 1 do
                                        table.insert(self.ArrayAnim, Animations[self.ArrayCategorie[Index]][i].name)
                                    end

                                    print(#self.ArrayAnim)
                                    self.IndexAnimations = 1
                                end
                            end
                        )

                        RageUI.List(
                            "Animations",
                            self.ArrayAnim,
                            self.IndexAnimations,
                            nil,
                            {},
                            true,
                            function(_, _, Selected, Index)
                                self.IndexAnimations = Index
                                if Selected then
                                    local v = Animations[self.ArrayCategorie[self.IndexCategorie]][self.IndexAnimations]
                                    doAnim(v.anim, nil, v.func)
                                end
                            end
                        )

                    end,
                    function()
                    end
                )
            end
        end
    end
)

DisableHud = function(bool)
    if bool == nil then
        return Player.HUDStats
    else
        if bool then
            TriggerEvent("es:setMoneyDisplay", 1.0)
        else
            TriggerEvent("es:setMoneyDisplay", 0.0)
        end
    end
end
Citizen.CreateThread(
    function()
        while true do
            Wait(1)
            if RMenu:Get("personnal", "settings").CinemaMode then
                DrawRect(0.471, 0.06, 1.065, 0.13, 0, 0, 0, 255)
                DrawRect(0.503, 0.935, 1.042, 0.13, 0, 0, 0, 255)
                HideHudComponentThisFrame(7)
                HideHudComponentThisFrame(8)
                HideHudComponentThisFrame(9)
                HideHudComponentThisFrame(6)
                HideHudComponentThisFrame(19)
                HideHudAndRadarThisFrame()
            end
        end
    end
)


RMenu:Get("personnal", "settings").Closed = function()
    refreshDemarche()
end



function refreshDemarche()
    print("t")
    Citizen.CreateThread(function()
        local ped = LocalPlayer().Ped
        local anim = demarcheAnim[oldDemarche].dict
        print(anim)
        ResetPedMovementClipset(ped, 0)
        if oldDemarche ~= 1 then
            RequestAnimSet(anim)
            while not HasAnimSetLoaded(anim) do
                Citizen.Wait(100)
            end
            SetPedMovementClipset(ped, anim, 0)
        end
    end)
end